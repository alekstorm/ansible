#!/usr/bin/env python
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: ec2_vol
short_description: create and attach a volume, return volume id and device map
description:
    - creates an EBS volume and optionally attaches it to an instance.  If both an instance ID and a device name is given and the instance has a device at the device name, then no volume is created and no attachment is made.  This module has a dependency on python-boto.
version_added: "1.1"
options:
  aws_secret_key:
    description:
      - AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
    required: false
    default: None
    aliases: ['ec2_secret_key', 'secret_key' ]
  aws_access_key:
    description:
      - AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
    required: false
    default: None
    aliases: ['ec2_access_key', 'access_key' ]
  ec2_url:
    description:
      - Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used
    required: false
    default: null
    aliases: []
  instance:
    description:
      - instance ID if you wish to attach the volume.
    required: false
    default: null
    aliases: []
  volume_size:
    description:
      - size of volume (in GB) to create.
    required: true
    default: null
    aliases: []
  iops:
    description:
      - the provisioned IOPs you want to associate with this volume (integer).
    required: false
    default: 100
    aliases: []
    version_added: "1.3"
  device_name:
    description:
      - device id to override device mapping. Assumes /dev/sdf for Linux/UNIX and /dev/xvdf for Windows.
    required: false
    default: null
    aliases: []
  region:
    description:
      - The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.
    required: false
    default: null
    aliases: ['aws_region', 'ec2_region']
  zone:
    description:
      - zone in which to create the volume, if unset uses the zone the instance is in (if set)
    required: false
    default: null
    aliases: ['aws_zone', 'ec2_zone']
requirements: [ "boto" ]
author: Lester Wade
'''

EXAMPLES = '''
# Simple attachment action
- local_action:
    module: ec2_vol
    instance: XXXXXX
    volume_size: 5
    device_name: sdd

# Example using custom iops params
- local_action:
    module: ec2_vol
    instance: XXXXXX
    volume_size: 5
    iops: 200
    device_name: sdd

# Playbook example combined with instance launch
- local_action:
    module: ec2
    keypair: "{{ keypair }}"
    image: "{{ image }}"
    wait: yes
    count: 3
    register: ec2
- local_action:
    module: ec2_vol
    instance: "{{ item.id }} "
    volume_size: 5
    with_items: ec2.instances
    register: ec2_vol
'''

# Note: this module needs to be made idempotent. Possible solution is to use resource tags with the volumes.
# if state=present and it doesn't exist, create, tag and attach.
# Check for state by looking for volume attachment with tag (and against block device mapping?).
# Would personally like to revisit this in May when Eucalyptus also has tagging support (3.3).

import sys
import time

try:
    import boto.ec2
except ImportError:
    print "failed=True msg='boto required for this module'"
    sys.exit(1)

AWS_REGIONS = ['ap-northeast-1',
               'ap-southeast-1',
               'ap-southeast-2',
               'eu-west-1',
               'sa-east-1',
               'us-east-1',
               'us-west-1',
               'us-west-2']

def main():
    module = AnsibleModule(
        argument_spec = dict(
            # backwards-incompatible, but at least it doesn't silently do the wrong thing
            state = dict(choices=['present', 'attached', 'detached', 'absent'], default='attached'),
            instance = dict(),
            volume_size = dict(),
            iops = dict(),
            device_name = dict(),
            volume = dict(),
            snapshot = dict(),
            tags = dict(),
            region = dict(aliases=['aws_region', 'ec2_region'], choices=AWS_REGIONS),
            zone = dict(aliases=['availability_zone', 'aws_zone', 'ec2_zone']),
            ec2_url = dict(),
            aws_secret_key = dict(aliases=['ec2_secret_key', 'secret_key'], no_log=True),
            aws_access_key = dict(aliases=['ec2_access_key', 'access_key']),
        )
    )

    state = module.params.get('state')
    instance_id = module.params.get('instance')
    volume_size = module.params.get('volume_size')
    iops = module.params.get('iops')
    device_name = module.params.get('device_name')
    volume_id = module.params.get('volume')
    snapshot = module.params.get('snapshot')
    tags = module.params.get('tags')
    region = module.params.get('region')
    zone = module.params.get('zone')
    ec2_url = module.params.get('ec2_url')
    aws_secret_key = module.params.get('aws_secret_key')
    aws_access_key = module.params.get('aws_access_key')

    # allow eucarc environment variables to be used if ansible vars aren't set
    if not ec2_url:
        ec2_url = os.environ.get('EC2_URL')

    if not aws_secret_key:
        aws_secret_key = os.environ.get('AWS_SECRET_KEY', os.environ.get('EC2_SECRET_KEY'))

    if not aws_access_key:
        aws_access_key = os.environ.get('AWS_ACCESS_KEY', os.environ.get('EC2_ACCESS_KEY'))

    if not region:
        region = os.environ.get('AWS_REGION', os.environ.get('EC2_REGION'))

    # If we have a region specified, connect to its endpoint.
    try:
        if region:
            ec2 = boto.ec2.connect_to_region(region, aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)
        # Otherwise, no region so we fallback to the old connection method
        elif ec2_url:
            ec2 = boto.connect_ec2_endpoint(ec2_url, aws_access_key, aws_secret_key)
        else:
            module.fail_json(msg="Either region or ec2_url must be specified")
    except boto.exception.NoAuthHandlerFound, e:
        module.fail_json(msg = str(e))

    def get_volume(volume_id):
        try:
            return ec2.get_all_volumes(volume_id)[0]
        except boto.exception.EC2ResponseError as e:
            if e.error_code != 'InvalidVolume.NotFound':
                raise e
            return None

    def wait_status(volume, status):
        while volume.status != status:
            time.sleep(3)
            volume.update()

    try:
        if state == 'absent':
            volume = get_volume(volume_id)
            if not volume:
                module.exit_json("Volume is already absent", changed=False)
            if volume.attach_data.instance_id is not None:
                ec2.detach_volume(volume.id, instance_id, device_name)
                wait_status(volume, 'available')
            try:
                ec2.delete_volume(volume.id)
                wait_status(volume, 'deleted')
            except boto.exception.EC2ResponseError as e:
                if e.error_code != 'InvalidVolume.NotFound':
                    raise e
        else:
            def create_volume():
                if volume_id:
                    volume = get_volume(volume_id)
                else:
                    volume = ec2.create_volume(volume_size, zone, snapshot, 'io1' if iops else 'standard', iops)
                    wait_status(volume, 'available')
                tag_volume(volume)
                return volume

            # Here we need to get the zone info for the instance. This covers situation where
            # instance is specified but zone isn't.
            # Useful for playbooks chaining instance launch with volume create + attach and where the
            # zone doesn't matter to the user.
            if instance_id:
                reservation = ec2.get_all_instances(instance_id)
                instance = reservation[0].instances[0]
                zone = instance.placement

            def tag_volume(volume):
                if tags:
                    ec2.create_tags([volume.id], tags)
                    return not all(volume.tags.get(key) == str(value) for key, value in tags.items())
                return False

            # TODO require any two of instance_id, volume_id, device_name for pretty much everything
            # - but device_name is derived already
            if state == 'attached':
                # If device_name isn't set, make a choice based on best practices here:
                # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html

                # In future this needs to be more dynamic but combining block device mapping best practices
                # (bounds for devices, as above) with instance.block_device_mapping data would be tricky. For me ;)

                # Use password data attribute to tell whether the instance is Windows or Linux
                if not device_name:
                    if not instance_id:
                        module.fail_json(msg="'device_name' and 'instance' cannot both be unset when 'state' is 'attached'")
                    device_name = '/dev/xvdf' if ec2.get_password_data(instance.id) else '/dev/sdf'

                device = instance.block_device_mapping.get(device_name)
                foo = False
                bar = False
                if volume_id and device:
                    foo = True
                    bar = device.volume_id == volume_id
                if (not volume_id and device) or bar:
                    changed = tag_volume(get_volume(device.volume_id))
                    module.exit_json(msg="Volume already attached to the given instance as the given device",
                        changed=changed)
                if foo and not bar:
                    module.fail_json(msg="Another volume is already attached to the given instance as the given device")

                volume = create_volume()
                volume.attach(instance.id, device_name)
                wait_status(volume, 'in-use')
            elif state == 'detached':
                volume = None
                if instance and not volume_id:
                    device = instance.block_device_mapping.get(device_name)
                    if device:
                        volume = get_volume(device.volume_id)
                        tag_volume(volume)
                if not volume:
                    volume = create_volume()
                if volume.attach_data.instance_id is None:
                    module.exit_json(msg="Volume is already detached", changed=False)
                ec2.detach_volume(volume.id, instance_id, device_name)
                wait_status(volume, 'available')
            else:
                volume = create_volume()

        module.exit_json(volume_id=volume.id, changed=True)
    except boto.exception.BotoServerError, e:
        module.fail_json(msg="%s: %s" % (e.error_code, e.error_message))

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
