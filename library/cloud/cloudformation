#!/usr/bin/env python
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: cloudformation
short_description: create a AWS CloudFormation stack
description:
     - Launches an AWS CloudFormation stack and waits for it complete.
version_added: "1.1"
options:
  stack_name:
    description:
      - name of the cloudformation stack
    required: true
    default: null
    aliases: []
  disable_rollback:
    description:
      - If a stacks fails to form, rollback will remove the stack
    required: false
    default: "no"
    choices: [ "yes", "no" ]
    aliases: []
  template_parameters:
    description:
      - a list of hashes of all the template variables for the stack
    required: true
    default: null
    aliases: []
  region:
    description:
      - The AWS region the stack will be launched in
    required: true
    default: null
    aliases: []
  state:
    description:
      - If state is "present", stack will be created.  If state is "present" and if stack exists and template has changed, it will be updated.
        If state is absent, stack will be removed.
    required: true
    default: null
    aliases: []
  template:
    description:
      - the path of the cloudformation template
    required: true
    default: null
    aliases: []
  aws_access_key:
    description:
      - AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
    required: false
    default: null
  aws_secret_key:
    description:
      - AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
    required: false
    default: null

requirements: [ "boto" ]
author: James S. Martin
'''

EXAMPLES = '''
- name: launch ansible cloudformation example
  cloudformation:
    stack_name: ansible-cloudformation
    state: present
    region: us-east-1
    disable_rollback: yes
    template: files/cloudformation-example.json
    template_parameters:
      KeyName: jmartin
      DiskType: ephemeral
      InstanceType: m1.small
      ClusterSize: 3
'''

import boto.cloudformation
from boto.exception import BotoServerError

import time


def api_error(exception):
    try:
        return json.loads(exception.error_message)['Error']
    except (KeyError, ValueError):
        raise ValueError(exception.error_message)


def main():
    module = AnsibleModule(
        argument_spec=dict(
            stack_name=dict(required=True),
            template_parameters=dict(default={}),
            region=dict(required=True),
            state=dict(default='present', choices=['present', 'absent']),
            template=dict(required=True),
            disable_rollback=dict(default=False),
            aws_access_key=dict(default=None),
            aws_secret_key=dict(no_log=True, default=None),
            poll_interval=dict(default=3),
        )
    )

    state = module.params['state']
    stack_name = module.params['stack_name']
    region = module.params['region']
    with open(module.params['template'], 'r') as f:
        template_body = f.read()
    disable_rollback = module.params['disable_rollback']
    template_parameters = module.params['template_parameters']
    poll_interval = module.params['poll_interval']

    conn = boto.cloudformation.connect_to_region(region,
        aws_access_key_id=module.params.get('aws_access_key',
            os.environ.get('AWS_ACCESS_KEY')),
        aws_secret_access_key=module.params.get('aws_secret_key',
            os.environ.get('AWS_SECRET_KEY')))

    # if state is present we are going to ensure that the stack is either
    # created or updated
    if state == 'present':
        # convert the template parameters ansible passes into a tuple for boto
        template_parameters_tup = template_parameters.items()

        try:
            conn.create_stack(stack_name,
                parameters=template_parameters_tup,
                template_body=template_body,
                disable_rollback=disable_rollback,
                capabilities=['CAPABILITY_IAM'])
        except BotoServerError, exception:
            error = api_error(exception)
            if error['Code'] == 'AlreadyExistsException':
                # if the stack already exists, we try to update it
                # AWS will tell us if the stack template and parameters are the
                # same and don't need to be updated.
                try:
                    conn.update_stack(stack_name,
                        parameters=template_parameters_tup,
                        template_body=template_body,
                        disable_rollback=disable_rollback,
                        capabilities=['CAPABILITY_IAM'])
                except BotoServerError, exception:
                    error = api_error(exception)
                    if error['Message'] == 'No updates are to be performed.':
                        module.exit_json(changed=False, msg='Stack is already up-to-date.')
                    raise ValueError(exception.error_message)

                operation = 'UPDATE'
            else:
                raise ValueError(exception.error_message)
        else:
            operation = 'CREATE'
    else:
        # absent state is different because of the way delete_stack works.
        # problem is it it doesn't give an error if stack isn't found
        # so must describe the stack first
        try:
            conn.describe_stacks(stack_name)
        except BotoServerError, exception:
            if exception.error_message == 'Stack:%s does not exist' % stack_name:
                module.exit_json(changed=False, msg='Stack not found.')
            raise ValueError(exception.error_message)

        conn.delete_stack(stack_name)
        operation = 'DELETE'

    def events(stack):
        return [str(event) for event in stack.describe_events()]

    existed = []
    while True:
        try:
            stack = conn.describe_stacks(stack_name)[0]
            existed[:] = ['yes']
        except:
            # TODO re-evaluate
            if existed != ['yes']:
                module.fail_json(msg='Stack not found.')
            module.exit_json(changed=True, msg='Stack deleted.', events=events(stack))

        if stack.stack_status == '%s_COMPLETE' % operation:
            module.exit_json(changed=True,
                             events=events(stack),
                             msg='Stack %s complete.' % operation,
                             outputs=dict((o.key, o.value) for o in stack.outputs))
        elif stack.stack_status == '%s_ROLLBACK_COMPLETE' % operation:
            module.fail_json(changed=True,
                             events=events(stack),
                             msg='Problem with %s. Rollback complete.' % operation)
        elif stack.stack_status == '%s_FAILED' % operation:
            module.fail_json(events=events(stack),
                             msg='Stack %s failed.' % operation)
        time.sleep(poll_interval)


# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
